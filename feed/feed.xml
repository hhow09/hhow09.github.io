<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>hhow09&#39;s Blog</title>
	<subtitle>sofware engineering stuff</subtitle>
	<link href="https://hhow09.github.io/feed/feed.xml" rel="self"/>
	<link href="https://hhow09.github.io/"/>
	<updated>2024-01-16T00:00:00Z</updated>
	<id>https://hhow09.github.io/</id>
	<author>
		<name>HH</name>
		<email>hhow09@gmail.com</email>
	</author>
	
	<entry>
		<title>Distributed Lock with Redis, Redlock</title>
		<link href="https://hhow09.github.io/blog/redlock/"/>
		<updated>2024-01-16T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/redlock/</id>
		<content type="html">&lt;p&gt;Distributed Lock with Redis and reviews on Redlock algorithm.&lt;/p&gt;
&lt;h2 id=&quot;lock-command-with-single-redis-instance&quot; tabindex=&quot;-1&quot;&gt;Lock Command With Single Redis Instance &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;lock&quot; tabindex=&quot;-1&quot;&gt;Lock &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;SET resource_name my_random_value NX PX 30000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;unlock&quot; tabindex=&quot;-1&quot;&gt;Unlock &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if redis.call(&amp;quot;get&amp;quot;,KEYS[1]) == my_random_value then
    return redis.call(&amp;quot;del&amp;quot;,KEYS[1])
else
    return 0
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;failure-mode&quot; tabindex=&quot;-1&quot;&gt;Failure mode &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-single-instance-redis-down-single-point-of-failure&quot; tabindex=&quot;-1&quot;&gt;1. [Single Instance] Redis down (single point of failure) &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Solution: use Replica&lt;/p&gt;
&lt;h3 id=&quot;2-replica-the-leader-crashes-before-the-write-to-the-key-is-transmitted-to-the-replica&quot; tabindex=&quot;-1&quot;&gt;2. [Replica] The Leader crashes before the write to the key is transmitted to the replica. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram&amp;#10;    participant Client_A&amp;#10;    participant Client_B&amp;#10;    participant Master&amp;#10;    participant Replica&amp;#10;    note over Client_A, Replica: vv normal case vv&amp;#10;    Client_A -&amp;gt;&amp;gt;+ Master: Acquire Lock&amp;#10;    Master --&amp;gt;&amp;gt;- Client_A: success&amp;#10;    Master -&amp;gt;&amp;gt; Replica: replicate&amp;#10;    Client_A -&amp;gt;&amp;gt;+ Master: UnLock&amp;#10;    Master --&amp;gt;&amp;gt;- Client_A: success&amp;#10;    Master -&amp;gt;&amp;gt; Replica: replicate&amp;#10;    note over Client_A, Replica:  vv Failure case vv&amp;#10;    Client_A -&amp;gt;&amp;gt;+ Master: Acquire Lock&amp;#10;    Master --&amp;gt;&amp;gt;- Client_A: success&amp;#10;    note over Master: crash before replicate&amp;#10;    note over Replica: promoted as Master&amp;#10;    Client_B -&amp;gt;&amp;gt;+ Replica: Acquire Lock&amp;#10;    Replica --&amp;gt;&amp;gt;- Client_B: success&amp;#10;    note over Client_B: SAFETY VIOLATION!&amp;#10;&lt;/pre&gt;
&lt;h4 id=&quot;solution&quot; tabindex=&quot;-1&quot;&gt;Solution &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Consensus algorithm e.g. &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;Redlock&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;redlock-algorithm&quot; tabindex=&quot;-1&quot;&gt;Redlock Algorithm &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref1:1&quot;&gt;[1:1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;prerequisite&quot; tabindex=&quot;-1&quot;&gt;Prerequisite &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In the distributed version of the algorithm we assume we have N Redis masters. Those nodes are totally independent, so we don’t use replication or any other implicit coordination system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;overview&quot; tabindex=&quot;-1&quot;&gt;Overview &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The answer is through majority consensus. Since one Redis is not reliable, we form a committee of multiple Redis. If and only if more than half of the committee members agree, the lock will take effect; otherwise, the lock is invalid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The members can be single, master-slave, or even clusters, but nevertheless, they are independent of each other, in other words, they are not duplicates of each other, not to mention the same cluster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;flow&quot; tabindex=&quot;-1&quot;&gt;Flow &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/CBZ_Vol0z6-862.avif 862w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/CBZ_Vol0z6-862.webp 862w&quot;&gt;&lt;img alt=&quot;Redlock Flow&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/CBZ_Vol0z6-862.png&quot; width=&quot;862&quot; height=&quot;1118&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h3 id=&quot;go-redsync-redsync&quot; tabindex=&quot;-1&quot;&gt;go-redsync/redsync &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;code snippet to acuire lock.&lt;/p&gt;
&lt;pre class=&quot;language-go&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// https://github.com/go-redsync/redsync/blob/master/mutex.go&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// lockContext locks m. In case it returns an error on failure, &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// you may retry to acquire the lock by calling this method again.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lockContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tries &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; ctx &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		ctx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// every lock is &quot;signed&quot; with a random string, so the lock will&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// be removed only if it is still the one that was set by the client&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// trying to remove it.&lt;/span&gt;
	value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;genValueFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timer &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Timer
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; tries&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// ... timer and retry part&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// 1. Get the current time.&lt;/span&gt;
		start &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// 2. … All the steps needed to acquire the lock …&lt;/span&gt;
		n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// timeout factor: when setting the lock in each instance, &lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// the client uses a timeout which is small compared to the&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// total lock auto-release time in order to acquire it.&lt;/span&gt;
			ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cancel &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeoutFactor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;actOnPoolsAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pool redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// 3. Get the current time, again.&lt;/span&gt;
		now &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;// 4. Check if we are already out of time, or if we acquired the lock fast enough.&lt;/span&gt;
		until &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiry &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driftFactor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// quorum: len(r.pools)/2 + 1&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// As long as the quorum is met, we can assume the lock is acquired.&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quorum &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;until&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value
			m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;until &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; until
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// lock not acquired&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// unlock previously locked key&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cancel &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeoutFactor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;actOnPoolsAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pool redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// exceed max retry times&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tries&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ErrFailed
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;noted that at &lt;strong&gt;indefinite network delay or GC pause could happend&lt;/strong&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref4:1&quot;&gt;[4:1]&lt;/a&gt;&lt;/sup&gt;, so we need to re-check expiry time at step 3 and 4&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that whatever happens between 1 and 3, you can add the network delays you want, the lock will always be considered not valid if too much time elapsed, so Redlock looks completely immune from messages that have unbound delays between processes. It was designed with this goal in mind, and I cannot see how the above race condition could happen. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;review-on-readlock-by-martin-kleppmann&quot; tabindex=&quot;-1&quot;&gt;Review on Readlock by Martin Kleppmann &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref1:2&quot;&gt;[1:2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;issue-1-clock-skew&quot; tabindex=&quot;-1&quot;&gt;Issue 1: Clock Skew &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;What happens if a clock on one of the Redis nodes jumps forward?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Client 1 acquires lock on nodes A, B, C. Due to a network issue, D and E cannot be reached.&lt;/li&gt;
&lt;li&gt;The clock on node C jumps forward, causing the lock to expire.&lt;/li&gt;
&lt;li&gt;Client 2 acquires lock on nodes C, D, E. Due to a network issue, A and B cannot be reached.&lt;/li&gt;
&lt;li&gt;Clients 1 and 2 now both believe they hold the lock.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;response-from-antirez&quot; tabindex=&quot;-1&quot;&gt;Response from antirez &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref5:1&quot;&gt;[5:1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin says that the clock can randomly jump in a system because of two issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The system administrator manually alters the clock.&lt;/li&gt;
&lt;li&gt;The ntpd daemon changes the clock a lot because it receives an update.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The above two problems can be avoided by “1” not doing this (otherwise even corrupting a Raft log with “echo foo &amp;gt; /my/raft/log.bin” is a problem), and “2” using an ntpd that does not change the time by jumping directly, but by distributing the change over the course of a larger time span.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;issue-2-long-gc-at-client-process&quot; tabindex=&quot;-1&quot;&gt;Issue 2: Long GC at Client Process &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref4:2&quot;&gt;[4:2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/rNglXUm5I2-1100.avif 1100w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/rNglXUm5I2-1100.webp 1100w&quot;&gt;&lt;img alt=&quot;Unsafe Lock&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/rNglXUm5I2-1100.png&quot; width=&quot;1100&quot; height=&quot;400&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Client 1 requests lock on nodes A, B, C, D, E.&lt;/li&gt;
&lt;li&gt;While the responses to client 1 are in flight, client 1 goes into stop-the-world GC.&lt;/li&gt;
&lt;li&gt;Locks expire on all Redis nodes.&lt;/li&gt;
&lt;li&gt;Client 2 acquires lock on nodes A, B, C, D, E.&lt;/li&gt;
&lt;li&gt;Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully acquired the lock (they were held in client 1’s kernel network buffers while the process was paused).&lt;/li&gt;
&lt;li&gt;Clients 1 and 2 now both believe they hold the lock.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;reason&quot; tabindex=&quot;-1&quot;&gt;Reason &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This bug is not theoretical: HBase used to &lt;a href=&quot;http://www.slideshare.net/enissoz/hbase-and-hdfs-understanding-filesystem-usage&quot;&gt;have this problem&lt;/a&gt; [3,4]. Normally, GC pauses are quite short, but “stop-the-world” GC pauses have sometimes been known to last for &lt;a href=&quot;https://blog.cloudera.com/blog/2011/02/avoiding-full-gcs-in-hbase-with-memstore-local-allocation-buffers-part-1/&quot;&gt;several minutes&lt;/a&gt; [5] – certainly long enough for a lease to expire.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;response-from-antirez-1&quot; tabindex=&quot;-1&quot;&gt;Response from antirez &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref5:2&quot;&gt;[5:2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;If you read the Redlock specification, that I hadn&#39;t touched for months, you can see the steps to acquire the lock are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the current time.&lt;/li&gt;
&lt;li&gt;… All the steps needed to acquire the lock …&lt;/li&gt;
&lt;li&gt;Get the current time, again.&lt;/li&gt;
&lt;li&gt;Check if we are already out of time, or if we acquired the lock fast enough.&lt;/li&gt;
&lt;li&gt;Do some work with your lock.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;He admitted that if long GC happens between step 3 and 4, it will actually calculate wrong expiration time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me tell again how this problem is common with &lt;em&gt;all the distributed locks implementations&lt;/em&gt;, and how the token as a solution is both unrealistic and can be used with Redlock as well. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref5:3&quot;&gt;[5:3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;solution-from-martin-fencing-token&quot; tabindex=&quot;-1&quot;&gt;Solution from Martin: Fencing token &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref4:3&quot;&gt;[4:3]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In this context, a fencing token is simply a number that increases (e.g. incremented by the lock service) every time a client acquires the lock.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note this requires the storage server to take an active role in checking tokens, and rejecting any writes on which the token has gone backwards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/Gux1iLMpYy-1100.avif 1100w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/Gux1iLMpYy-1100.webp 1100w&quot;&gt;&lt;img alt=&quot;Fencing token&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/Gux1iLMpYy-1100.png&quot; width=&quot;1100&quot; height=&quot;400&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;In simple word: use monotonic counter to know &amp;quot;the order of different client acquiring same lock&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, this leads us to the first big problem with Redlock: it does not have any facility for generating fencing tokens. The algorithm does not produce any number that is guaranteed to increase every time a client acquires a lock.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;java-implementation-redisson-fencedlock&quot; tabindex=&quot;-1&quot;&gt;Java Implementation: redisson FencedLock &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This type of lock maintains the fencing token to avoid cases when Client acquired the lock was delayed due to long GC pause or other reason and can&#39;t detect that it doesn&#39;t own the lock anymore. To resolve this issue token is returned by locking methods or getToken() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Token should be checked if it&#39;s greater or equal with the previous one by the service guarded by this lock and reject operation if condition is false.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class=&quot;language-java&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;RFencedLock&lt;/span&gt; lock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; redisson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFencedLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;myLock&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// or wait for lock aquisition up to 100 seconds &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// and automatically unlock it after 10 seconds&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; token &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tryLockAndGetToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;token &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;// check if token &gt;= old token&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;the-synchrony-assumptions-of-redlock&quot; tabindex=&quot;-1&quot;&gt;The synchrony assumptions of Redlock &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;These examples show that Redlock works correctly only if you assume a synchronous system model – that is, a system with the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bounded network delay (you can guarantee that packets always arrive within some guaranteed maximum delay),&lt;/li&gt;
&lt;li&gt;bounded process pauses (in other words, hard real-time constraints, which you typically only find in car airbag systems and suchlike), and&lt;/li&gt;
&lt;li&gt;bounded clock error (cross your fingers that you don’t get your time from a bad NTP server).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Redlock assumes that delays, pauses and drift are all small relative to the time-to-live of a lock;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if the timing issues become as large as the time-to-live, the algorithm fails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Redlock is heavy&lt;/li&gt;
&lt;li&gt;Implement fencing token for consistency.&lt;/li&gt;
&lt;li&gt;Count the clock drift and network delay. e.g. lock watchdog &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref6:1&quot;&gt;[6:1]&lt;/a&gt;&lt;/sup&gt;, Extending the lock&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; id=&quot;fnref1:3&quot;&gt;[1:3]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Don&#39;t alter the system time.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/redlock/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://redis.io/docs/manual/patterns/distributed-locks/&quot;&gt;Redis: Distributed Locks with Redis&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&quot;&gt;Martin Kleppmann: How to do distributed locking&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/starbugs/explain-redlock-in-depth-dba95c107102&quot;&gt;Explain Redlock in Depth&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/go-redsync/redsync&quot;&gt;go-redsync/redsync&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://antirez.com/news/101&quot;&gt;antirez: Is Redlock safe?&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/redisson/redisson/wiki/8.-distributed-locks-and-synchronizers#810-fenced-lock&quot;&gt;redisson: Fenced Lock&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/redlock/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>OAuth server for mobile applications</title>
		<link href="https://hhow09.github.io/blog/oauth2-server/"/>
		<updated>2023-12-30T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/oauth2-server/</id>
		<content type="html">&lt;p&gt;Some notes after working on Auhtorization server at work.&lt;/p&gt;
&lt;h2 id=&quot;requirement&quot; tabindex=&quot;-1&quot;&gt;Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;support authentication and authorization for application servers.&lt;/li&gt;
&lt;li&gt;Support different authorization methods for an account (e.g. google, apple and others... ).
&lt;ul&gt;
&lt;li&gt;goal: login process for applications are unified &lt;strong&gt;as if interacting with a single authorization server&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manage user account and sessions for application servers.&lt;/li&gt;
&lt;li&gt;Support refresh token rotation.&lt;/li&gt;
&lt;li&gt;Should follow &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;OAuth 2.0 Authorization Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;related-rfcs&quot; tabindex=&quot;-1&quot;&gt;Related RFCs &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;RFC 6749 OAuth 2.0 Authorization Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8252&quot;&gt;RFC 8252 OAuth 2.0 for Native Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7662&quot;&gt;RFC 7662 OAuth 2.0 Token Introspection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;terms&quot; tabindex=&quot;-1&quot;&gt;Terms &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;client&quot; tabindex=&quot;-1&quot;&gt;Client &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An application making protected resource requests on behalf of the resource owner and with its authorization.  The term &amp;quot;client&amp;quot; does not imply any particular implementation characteristics (e.g., whether the application executes on a server, a desktop, or other devices).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;native-application-client&quot; tabindex=&quot;-1&quot;&gt;native application client &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;A native application is a public client installed and executed on the device used by the resource owner.  Protocol data and credentials are accessible to the resource owner.  It is assumed that any client authentication credentials included in the application can be extracted.  On the other hand, dynamically issued credentials such as access tokens or refresh tokens can receive an acceptable level of protection.  At a minimum, these credentials are protected from hostile servers with which the application may interact.  On some platforms, these credentials might be protected from other applications residing on the same device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;id-token&quot; tabindex=&quot;-1&quot;&gt;ID Token &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The ID Token is a security token that contains Claims about the Authentication of an End-User by an Authorization Server when using a Client, and potentially other requested Claims. The ID Token is represented as a &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#JWT&quot;&gt;JSON Web Token (JWT)&lt;/a&gt; [JWT].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/identity/openid-connect/openid-connect&quot;&gt;Google supports open ID Connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openid.net/apple-successfully-implements-openid-connect-with-sign-in-with-apple/&quot;&gt;Apple Successfully Implements OpenID Connect with Sign In with Apple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;login-flow&quot; tabindex=&quot;-1&quot;&gt;Login Flow &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Login flow mainly follows &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-4.4&quot;&gt;OAuth2.0: Client Credentials Grant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3rd Party Authentication flow follows &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest&quot;&gt;OpenID Connect: 3.1.2.1.  Authentication Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;participants&quot; tabindex=&quot;-1&quot;&gt;Participants &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mobile App (client)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Server (resource server)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responsible for business logic&lt;/li&gt;
&lt;li&gt;responsible for validating &lt;code&gt;access_token&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auth Service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responsible for user authentication: validating &lt;code&gt;id_token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;responsible for user authorization: issue &lt;code&gt;access_token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;responsible manage user account and sessions for application server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3rd Party Auth Service (e.g. Google, Apple)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responsible for user authentication: issue &lt;code&gt;id_token&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flow-chart&quot; tabindex=&quot;-1&quot;&gt;Flow Chart &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram&amp;#10;    autonumber&amp;#10;    participant App as Mobile App&amp;#10;    participant S as App Server&amp;#10;    participant AS as Auth Service&amp;#10;    participant 3AS as 3rd Party Auth Service (Google|Apple)&amp;#10;&amp;#10;    rect rgb(191, 223, 255)&amp;#10;        note over App: native app plugin&amp;#10;        App -&amp;gt;&amp;gt;+ 3AS: 3rd party login and authorization&amp;#10;        3AS --&amp;gt;&amp;gt;- App: id_token&amp;#10;    end&amp;#10;&amp;#10;    App -&amp;gt;&amp;gt;+ AS: Login(id_token)&amp;#10;    AS -&amp;gt;&amp;gt;+ 3AS: Validate id_token&amp;#10;    3AS --&amp;gt;&amp;gt;- AS: user info&amp;#10;    Note over AS: Identify the existed account or link to a new account&amp;#10;    Note over AS: Initiate new session for an account&amp;#10;    AS --&amp;gt;&amp;gt;- App: Access Token, Refresh Token&amp;#10;&amp;#10;    App -&amp;gt;&amp;gt; S: Request(access_token)&amp;#10;    Note over S: Validate access_token&amp;#10;    Note over S: Handle request&amp;#10;    S --&amp;gt;&amp;gt; App: response&amp;#10;&lt;/pre&gt;
&lt;h3 id=&quot;notes&quot; tabindex=&quot;-1&quot;&gt;Notes &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;for step 1 - 2, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;Roles&lt;/a&gt; in the context of OAuth 2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mobile App served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3rd Party Auth Service (Google, Apple) served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;authorization server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;App Server served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;resource server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;details flow for step 1 - 2 &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/zwKiqiahoB-364.avif 364w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/zwKiqiahoB-364.webp 364w&quot;&gt;&lt;img alt=&quot;Authorization flow for Installed applications&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/zwKiqiahoB-364.png&quot; width=&quot;364&quot; height=&quot;377&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after step 3, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;Roles&lt;/a&gt; in the context of OAuth 2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mobile App served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auth Service served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;authorization server&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;App Server served as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;resource server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;step 7: resource server token validation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The resource server MUST validate the access token and ensure ... &lt;em&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-7&quot;&gt;RFC 6749 7&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;step 7: how to validate access token ?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;These include using structured token formats such as JWT or proprietary inter-service communication mechanisms &lt;em&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7662#section-1&quot;&gt;RFC 7662&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;refresh-token-rotation&quot; tabindex=&quot;-1&quot;&gt;Refresh Token Rotation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;in another post: &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token&quot;&gt;OAuth 2.0 - Refresh Token and Rotation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;tricky-parts&quot; tabindex=&quot;-1&quot;&gt;Tricky Parts &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;client-authentication-for-mobile-apps&quot; tabindex=&quot;-1&quot;&gt;Client authentication for mobile apps &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Secrets that are statically included as part of an app distributed to multiple users should not be treated as confidential secrets, as one user may inspect their copy and learn the shared secret.
Authorization servers that still require a statically included shared secret for native app clients MUST treat the client as a public client&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;risk-client-impersonation&quot; tabindex=&quot;-1&quot;&gt;Risk: client impersonation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, OAuth client impersonation is when one OAuth client pretends to be another, usually to take advantage of any capabilities that the legitimate client may have that are not granted to other clients.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;are-there-any-solutions-for-client-impersonation&quot; tabindex=&quot;-1&quot;&gt;Are there any solutions for client impersonation? &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;For mobile apps, there is more hope. Apple has an API known as “App Attestation”, and Google has a similar API called “Google Play Integrity”. Both APIs work similarly, with a few technical differences. At a high level, both of them involve the application making a request to the operating system to sign some data. Then the app includes that signed string in the call it makes to the developer’s API. The API can validate the signature against the public key from Apple and Google to determine its confidence level that the API request is made from a real version of the mobile app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;reference-1&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.1&quot;&gt;RFC 6749 1.1&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-2.1&quot;&gt;RFC 6749 2.1&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#IDToken&quot;&gt;OpenID Connect Core 1.0&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developers.google.com/identity/protocols/oauth2#installed&quot;&gt;Google OAuth: Installed applications&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8252#section-8.5&quot;&gt;RFC 8252 8.5: Client Authentication&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developer.okta.com/blog/2022/06/01/oauth-public-client-identity#what-is-oauth-client-impersonation&quot;&gt;Okta: The Identity of OAuth Public Clients&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-server/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Idempotency</title>
		<link href="https://hhow09.github.io/blog/idempotency/"/>
		<updated>2023-12-14T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/idempotency/</id>
		<content type="html">&lt;h2 id=&quot;definition&quot; tabindex=&quot;-1&quot;&gt;Definition &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Definition in &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence#Idempotent_functions&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;idempotent elements are the functions f: E → E […] such that for all x in E, &lt;code&gt;f(f(x)) = f(x)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In computer science, the term idempotence may have a different meaning depending on the context in which it is applied&lt;/p&gt;
&lt;h3 id=&quot;in-http-protocol&quot; tabindex=&quot;-1&quot;&gt;In HTTP protocol &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; should be implemented in an idempotent manner according to the standard, but &lt;code&gt;POST&lt;/code&gt; doesn&#39;t need to be.&lt;/p&gt;
&lt;h3 id=&quot;in-event-driven-driven-system&quot; tabindex=&quot;-1&quot;&gt;in event driven driven system &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In event stream processing, idempotence refers to the ability of a system to produce the same outcome, even if the same file, event or message is received more than once.&lt;/p&gt;
&lt;h2 id=&quot;why-we-need-idempotency-in-distributed-system&quot; tabindex=&quot;-1&quot;&gt;Why we need idempotency in distributed system ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;requests-retry-is-inevitable&quot; tabindex=&quot;-1&quot;&gt;Requests retry is inevitable. &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;failures-happen&quot; tabindex=&quot;-1&quot;&gt;Failures Happen &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Many kinds of failures become apparent as requests taking longer than usual, and potentially never completing. When a client is waiting longer than usual for a request to complete, it also holds on to the resources it was using for that request for a longer time. When a number of requests hold on to resources for a long time, the server can run out of those resources. These resources can include memory, threads, connections, ephemeral ports, or anything else that is limited.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With idempotency, retry will just produce same side effect.&lt;/p&gt;
&lt;p&gt;E.g. &lt;code&gt;/POST record&lt;/code&gt; 1st time, record inserted and returned. 2nd time, find the result and simply return it again.&lt;/p&gt;
&lt;h3 id=&quot;duplicate-messages-are-inevitable&quot; tabindex=&quot;-1&quot;&gt;Duplicate Messages are Inevitable. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;m coining the phrase &amp;quot;effectively-once&amp;quot; for message processing with at-least-once + idempotent operations. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In event driven system, we talks about duplicate messages in both producer and consumer.&lt;/p&gt;
&lt;p&gt;For producer side, duplicate messages happens when message broker fail to acknowledge due temporary error.&lt;/p&gt;
&lt;p&gt;For consumer side, &lt;code&gt;at-least-once&lt;/code&gt; delivery is the most common setting. Since exactly once delivery comes with much more complexity and configuration and performance hurt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An application typically uses a message broker, such as Apache Kafka or RabbitMQ, that implements at-least once delivery. At-least once delivery ensures that messages will be delivered. It does mean, however, that the message broker can invoke a message handler repeatedly for the same message. You must use the Idempotent Consumer pattern to ensure that your message handlers correctly handle duplicate messages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;determine-if-the-operation-naturally-idempotent&quot; tabindex=&quot;-1&quot;&gt;Determine if the operation naturally Idempotent ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;some business logic naturally has follwing properties could be idempotent by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) has unique key known by the client&lt;/li&gt;
&lt;li&gt;(2) state does not need to sync between client and server&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;for-example&quot; tabindex=&quot;-1&quot;&gt;For Example &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(O) register user with email (as primary key)
&lt;ul&gt;
&lt;li&gt;operation is naturally idempotent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;withdraw account balance of user
&lt;ul&gt;
&lt;li&gt;(X) &lt;code&gt;withdraw(user_id, amount)&lt;/code&gt; cannot be idempotent because the &lt;strong&gt;current balance&lt;/strong&gt;  is not provided beforehand.&lt;/li&gt;
&lt;li&gt;(O) &lt;code&gt;withdraw(user_id, amount, current_balance)&lt;/code&gt; can be made idempotent using &lt;code&gt;current_balance&lt;/code&gt; as optimistic lock. However, the requester need to retrieve &lt;code&gt;current_balance&lt;/code&gt; in advance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-request-included-an-external-api-call&quot; tabindex=&quot;-1&quot;&gt;The request included an external API call &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(O) external API provides idempotent design&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;a href=&quot;https://brandur.org/idempotency-keys#rocket-rides-phases&quot;&gt;Rocket Ride&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(X) sending an email&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains non-idempotenet &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;foreign state mutations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;idempotency-key&quot; tabindex=&quot;-1&quot;&gt;Idempotency key &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;rfc&quot; tabindex=&quot;-1&quot;&gt;RFC &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04&quot;&gt;RFC Draft: The Idempotency-Key HTTP Header Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;definition-1&quot; tabindex=&quot;-1&quot;&gt;Definition &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An idempotency key is a unique value that’s generated by a client and sent to an API along with a request. The server stores the key to use for bookkeeping the status of that request on its end. If a request should fail partway through, the client retries with the same idempotency key value, and the server uses it to look up the request’s state and continue from where it left off. The name “idempotency key” &lt;a href=&quot;https://stripe.com/blog/idempotency&quot;&gt;comes from Stripe’s API&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;key-generation&quot; tabindex=&quot;-1&quot;&gt;Key Generation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The idempotency key that is supplied as part of every POST request MUST be unique and MUST NOT be reused with another request with a different request payload. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Uniqueness of the key MUST be defined by the resource owner and MUST be implemented by the clients of the resource server. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref7:1&quot;&gt;[7:1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;implementations&quot; tabindex=&quot;-1&quot;&gt;Implementations &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&quot;idempotent-middleware&quot; tabindex=&quot;-1&quot;&gt;Idempotent Middleware &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Idempotency middleware allows for fault-tolerant APIs where duplicate requests.&lt;/p&gt;
&lt;p&gt;business logic does not aware of the idempotent key&lt;/p&gt;
&lt;h3 id=&quot;flow&quot; tabindex=&quot;-1&quot;&gt;Flow &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram&amp;#10;    title: idempotent middleware flow;&amp;#10;    actor C as Client;&amp;#10;    participant server;&amp;#10;    participant R as request repo;&amp;#10;    participant LS as lock store;&amp;#10;    &amp;#10;    &amp;#10;    C -&amp;gt;&amp;gt; server: request (idempotent_key)&amp;#10;    note over server: verify key&amp;#10;    note over server: check key expiry&amp;#10;    server -&amp;gt;&amp;gt; R: GET Response&amp;#10;&amp;#10;    alt Not Exist (first pass)&amp;#10;        R --&amp;gt;&amp;gt; server: Not Exist&amp;#10;        server -&amp;gt;&amp;gt;+ LS: lock request&amp;#10;        LS --&amp;gt;&amp;gt;- server: success&amp;#10;        note over server: handle request&amp;#10;        server -&amp;gt;&amp;gt;+ R: SET Response&amp;#10;        R --&amp;gt;&amp;gt; server: Success&amp;#10;        server -&amp;gt;&amp;gt;+ LS: unlock request &amp;#10;        LS --&amp;gt;&amp;gt;- server: success    &amp;#10;        server -&amp;gt;&amp;gt; C: Response    &amp;#10;        R --&amp;gt;&amp;gt; server: Response&amp;#10;        server -&amp;gt;&amp;gt; C: Response&amp;#10;    else Exist&amp;#10;        R --&amp;gt;&amp;gt; server: Response&amp;#10;        server -&amp;gt;&amp;gt; C: Response&amp;#10;    end&amp;#10;&lt;/pre&gt;
&lt;h3 id=&quot;idempotency-fingerprint&quot; tabindex=&quot;-1&quot;&gt;Idempotency Fingerprint &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref8&quot;&gt;[8]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An idempotency fingerprint MAY be used in conjunction with an idempotency key to determine the uniqueness of a request.  Such a fingerprint is generated from request payload data by the resource server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For Example:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fingerPrint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	key &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Idempotency-Key&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fail to read body, err: %w&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	fields &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;any&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;URL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token string&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fail to marshal fields, err: %w&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	sum &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sha1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;key-expiration&quot; tabindex=&quot;-1&quot;&gt;Key Expiration &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Does the server store idempotency keys forever? &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4 id=&quot;stripe&quot; tabindex=&quot;-1&quot;&gt;Stripe &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref10&quot;&gt;[10]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Clients can safely retry requests that include an idempotency key as long as the second request occurs within 24 hours from when you first receive the key (keys expire out of the system after 24 hours).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;rfc-1&quot; tabindex=&quot;-1&quot;&gt;RFC &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref11&quot;&gt;[11]&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref12&quot;&gt;[12]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The resource MAY enforce time based idempotency keys, thus, be able to purge or delete a key upon its expiry.  The resource server SHOULD define such expiration policy and publish it in the documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Resource server MUST publish idempotency related specification.  This specification MUST include expiration related policy if applicable. Server is responsible for managing the lifecycle of the idempotency key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;frameworks&quot; tabindex=&quot;-1&quot;&gt;Frameworks &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gofiber/fiber/blob/master/middleware/idempotency/idempotency.go&quot;&gt;Idempotency middleware for Fiber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;integrate-idempotent-key-into-business-logic&quot; tabindex=&quot;-1&quot;&gt;Integrate Idempotent key into business logic &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;the blog post &lt;a href=&quot;https://brandur.org/idempotency-keys#acyclic-state-machine&quot;&gt;Implementing Stripe-like Idempotency Keys in Postgres&lt;/a&gt; provides example content in detail.&lt;/p&gt;
&lt;p&gt;TLDR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break up steps into atomic phases&lt;/li&gt;
&lt;li&gt;store the state in each atomic phases along with idempotent key&lt;/li&gt;
&lt;li&gt;when user retry with same idempotent key, fetch the current state and continue the flow.&lt;/li&gt;
&lt;li&gt;the external API call need to be idempotent.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;concept&quot; tabindex=&quot;-1&quot;&gt;Concept &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;foreign-state-mutations&quot; tabindex=&quot;-1&quot;&gt;Foreign state mutations &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref6:1&quot;&gt;[6:1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;To shore up our backend, it’s key to identify where we’re making foreign state mutations; that is, calling out and manipulating data on another system. This might be creating a charge on Stripe, adding a DNS record, or sending an email.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some foreign state mutations are idempotent by nature (e.g. adding a DNS record), some are not idempotent but can be made idempotent with the help of an idempotency key (e.g. charge on Stripe, sending an email), and some operations are not idempotent, most often because a foreign service hasn’t designed them that way and doesn’t provide a mechanism like an idempotency key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;atomic-phase&quot; tabindex=&quot;-1&quot;&gt;Atomic phase &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref6:2&quot;&gt;[6:2]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;An atomic phase is a set of local state mutations that occur in transactions between foreign state mutations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Atomic phases should be safely committed before initiating any foreign state mutation. If the call fails, our local state will still have a record of it happening that we can use to retry the operation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;example-rocket-ride&quot; tabindex=&quot;-1&quot;&gt;Example: Rocket Ride &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/N0P3bcUe8p-603.avif 603w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/N0P3bcUe8p-603.webp 603w&quot;&gt;&lt;img alt=&quot;Atomic Phases&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/N0P3bcUe8p-603.svg&quot; width=&quot;603&quot; height=&quot;339&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h4 id=&quot;example-medusa&quot; tabindex=&quot;-1&quot;&gt;Example: Medusa &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref13&quot;&gt;[13]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/9e3nk6Bf1--1474.avif 1474w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/9e3nk6Bf1--1474.webp 1474w&quot;&gt;&lt;img alt=&quot;Idempotency Key implementation in Expressjs&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/9e3nk6Bf1--1474.png&quot; width=&quot;1474&quot; height=&quot;988&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-if-external-api-is-not-idempotent&quot; tabindex=&quot;-1&quot;&gt;What if External API is not idempotent &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; id=&quot;fnref6:3&quot;&gt;[6:3]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately, not every service will make this guarantee. If we try to make a non-idempotent foreign state mutation and we see a failure, we may have to persist this operation as permanently errored. In many cases we won’t know whether it’s safe to retry or not, and &lt;strong&gt;we’ll have to take the conservative route and fail the operation.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;companies-posts&quot; tabindex=&quot;-1&quot;&gt;Companies Posts &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Airbnb: &lt;a href=&quot;https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb&quot;&gt;Avoiding Double Payments in a Distributed Payments System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Square: &lt;a href=&quot;https://developer.squareup.com/docs/working-with-apis/idempotency&quot;&gt;Working with APIs: Idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stripe：&lt;a href=&quot;https://stripe.com/docs/api/idempotent_requests&quot;&gt;API Reference: Idempotent Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/idempotency/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://william-yeh.net/post/2020/03/idempotency-key-test/&quot;&gt;Idempotency Key：原理與實測&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/builders-library/timeouts-retries-and-backoff-with-jitter/&quot;&gt;AWS Timeouts, retries, and backoff with jitter&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://microservices.io/post/microservices/patterns/2020/10/16/idempotent-consumer.html&quot;&gt;Microservice Architecture: Idempotent consumer pattern&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nejckorasa.github.io/posts/idempotent-kafka-procesing/#understanding-the-intricacies-of-exactly-once-semantics-in-kafka&quot;&gt;Idempotent Processing with Kafka&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/viktorklang/status/789036133434978304&quot;&gt;Viktor Klang&#39;s Twitter&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://brandur.org/idempotency-keys&quot;&gt;Implementing Stripe-like Idempotency Keys in Postgres&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn7&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04#section-2.2&quot;&gt;RFC Idempotency-Key 2.2&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn8&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04#section-2.4&quot;&gt;RFC Idempotency-Key 2.4&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn9&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://andrewjdawson2016.medium.com/my-thoughts-on-idempotency-9a2f40a01a7e&quot;&gt;My Thoughts on Idempotency&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn10&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://stripe.com/docs/error-low-level#post-requests&quot;&gt;Stripe Doc&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn11&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04#section-2.3&quot;&gt;RFC Idempotency-Key 2.3&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn12&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04#section-2.5&quot;&gt;RFC Idempotency-Key 2.5&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn13&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://medusajs.com/blog/idempotency-nodejs-express-open-source/&quot;&gt;An open-source implementation of idempotency keys in NodeJS with Express&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/idempotency/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>OAuth 2.0 - Refresh Token and Rotation</title>
		<link href="https://hhow09.github.io/blog/oauth2-refresh-token/"/>
		<updated>2023-12-08T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/oauth2-refresh-token/</id>
		<content type="html">&lt;h2 id=&quot;specification&quot; tabindex=&quot;-1&quot;&gt;Specification &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Refresh tokens are credentials used to obtain access tokens. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) when current access token expires.&lt;/li&gt;
&lt;li&gt;(2) to obtain additional access tokens with identical or narrower scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issuing a refresh token is optional at the discretion of the authorization server. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref1:1&quot;&gt;[1:1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refresh tokens MUST be kept confidential in transit and storage, and shared only among the authorization server and the client to whom the refresh tokens were issued. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authorization server MUST maintain the binding between a refresh token and the client to whom it was issued. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refresh tokens MUST only be transmitted using TLS &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:2&quot;&gt;[2:2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authorization server MUST verify the binding between the refresh token and client identity. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:3&quot;&gt;[2:3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When client authentication is not possible, the authorization server SHOULD deploy other means to detect refresh token abuse. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:4&quot;&gt;[2:4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;Refresh Token Rotation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a refresh token is compromised and subsequently used by both the attacker and the legitimate client, one of them will present an  invalidated refresh token, which will inform the authorization server of the breach. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:5&quot;&gt;[2:5]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authorization server MUST ensure that refresh tokens cannot be generated, modified, or guessed to produce valid refresh tokens by unauthorized parties. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref2:6&quot;&gt;[2:6]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cannot be modified: signing&lt;/li&gt;
&lt;li&gt;cannot be guessed: encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;other-specifications&quot; tabindex=&quot;-1&quot;&gt;Other Specifications &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OAuth 2.0 Token Revocation &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Refresh Token Expiration
&lt;ul&gt;
&lt;li&gt;The refresh token has not been used for six months. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;LinkedIn offers programmatic refresh tokens that are valid for a fixed length of time. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;refresh-access-token&quot; tabindex=&quot;-1&quot;&gt;Refresh Access Token &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;why&quot; tabindex=&quot;-1&quot;&gt;Why &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;access token usually issued for a limited time.&lt;/li&gt;
&lt;li&gt;In the scenario of an expiring access token, your application has two alternatives:
&lt;ul&gt;
&lt;li&gt;Ask the users of your application to re-authenticate each time an access token expires.&lt;/li&gt;
&lt;li&gt;The authorization server automatically issues a new access token once it expires.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-to-refreshing-an-access-token&quot; tabindex=&quot;-1&quot;&gt;How to Refreshing an Access Token ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;client-request&quot; tabindex=&quot;-1&quot;&gt;Client Request &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded
     grant_type=refresh_token&amp;amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;auth-server&quot; tabindex=&quot;-1&quot;&gt;Auth Server &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;MUST authenticate the client if client authentication is included&lt;/li&gt;
&lt;li&gt;MUST validate the refresh token.&lt;/li&gt;
&lt;li&gt;IF valid and authorized, the authorization server issues an access token&lt;/li&gt;
&lt;li&gt;The authorization server MAY issue a new refresh token, in which case the client MUST discard the old refresh token and replace it with the new refresh token.&lt;/li&gt;
&lt;li&gt;The authorization server MAY revoke the old refresh token after issuing a new refresh token to the client.&lt;/li&gt;
&lt;li&gt;If a new refresh token is issued, the refresh token scope MUST be identical to that of the refresh token included by the client in the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;flow&quot; tabindex=&quot;-1&quot;&gt;Flow &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  +--------+                                           +---------------+
  |        |--(A)------- Authorization Grant ---------&amp;gt;|               |
  |        |                                           |               |
  |        |&amp;lt;-(B)----------- Access Token -------------|               |
  |        |               &amp;amp; Refresh Token             |               |
  |        |                                           |               |
  |        |                            +----------+   |               |
  |        |--(C)---- Access Token ----&amp;gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&amp;lt;-(D)- Protected Resource --| Resource |   | Authorization |
  | Client |                            |  Server  |   |     Server    |
  |        |--(E)---- Access Token ----&amp;gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&amp;lt;-(F)- Invalid Token Error -|          |   |               |
  |        |                            +----------+   |               |
  |        |                                           |               |
  |        |--(G)----------- Refresh Token -----------&amp;gt;|               |
  |        |                                           |               |
  |        |&amp;lt;-(H)----------- Access Token -------------|               |
  +--------+           &amp;amp; Optional Refresh Token        +---------------+

               Figure 2: Refreshing an Expired Access Token
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;refresh-token-rotation&quot; tabindex=&quot;-1&quot;&gt;Refresh Token Rotation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Refresh token rotation is intended to automatically detect and prevent attempts to use the same refresh token in parallel from different apps/devices. This happens if a token gets stolen from the client and is subsequently used by both the attacker and the legitimate client. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref8&quot;&gt;[8]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The basic idea is to change the refresh token value with every refresh request in order to detect attempts to obtain access tokens using old refresh tokens. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref8:1&quot;&gt;[8:1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;It&#39;s a way to prevent token reuse according to &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;Specification 7&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;implementatino-notes&quot; tabindex=&quot;-1&quot;&gt;Implementatino Notes &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In accessing data storage layer, (1) New Refresh Token and (2) Invalidate Refresh Token should be atomic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.okta.com/docs/guides/refresh-tokens/main/#refresh-token-rotation&quot;&gt;Okta: Refresh token rotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation&quot;&gt;Auth0: Refresh Token Rotation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;refresh-token-reuse-detection&quot; tabindex=&quot;-1&quot;&gt;Refresh token reuse detection &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;If a previously used refresh token is used again with the token request, the authorization server automatically detects the attempted reuse of the refresh token. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;As a result, Okta immediately invalidates the most recently issued refresh token and all access tokens issued since the user authenticated. This protects your application from token compromise and replay attacks.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref9:1&quot;&gt;[9:1]&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;Since the authorization server cannot determine whether the attacker or the legitimate client is trying to access, in case of such an access attempt the valid refresh token and the access authorization associated with it are both revoked. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref8:2&quot;&gt;[8:2]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;reuse-scenario&quot; tabindex=&quot;-1&quot;&gt;Reuse Scenario &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref10&quot;&gt;[10]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/1-cV09DgQ2-2999.avif 2999w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/1-cV09DgQ2-2999.webp 2999w&quot;&gt;&lt;img alt=&quot;Scenario 1: Refresh Token Reuse&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/1-cV09DgQ2-2999.png&quot; width=&quot;2999&quot; height=&quot;1687&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/KIbZ25k-l1-2999.avif 2999w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/KIbZ25k-l1-2999.webp 2999w&quot;&gt;&lt;img alt=&quot;Scenario 2: Refresh Token Reuse&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/KIbZ25k-l1-2999.png&quot; width=&quot;2999&quot; height=&quot;1687&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In these scenarios, the reuse of a refresh token triggers all kinds of alarms with the authorization server. Refresh token reuse likely means that a second party is trying to use a stolen refresh token. In response to this reuse, the authorization server immediately revokes the reused refresh token, along with all descendant tokens. Concretely, all refresh tokens that have ever been derived from the reused refresh token become invalid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;issue-client-retry-v-s-replay-attack&quot; tabindex=&quot;-1&quot;&gt;Issue: Client Retry v.s. Replay attack &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Token reuse detection can sometimes impact the user experience. For example, when users with poor network connections access apps, new tokens issued by Okta might not reach the client app. As a result, the client might want to reuse the refresh token to get new tokens. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref11&quot;&gt;[11]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;According to &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;Specification 8&lt;/a&gt;, Refresh token reuse detection should be implemented for preventing &lt;a href=&quot;https://auth0.com/docs/secure/security-guidance/prevent-threats#replay-attacks&quot;&gt;replay attack&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Without enforcing sender-constraint, it’s impossible for the authorization server to know which actor is legitimate or malicious in the event of a replay attack. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref12&quot;&gt;[12]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If retry is allowed, it means somehow security is sacrificed in some degree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;solution-from-okta-grace-period&quot; tabindex=&quot;-1&quot;&gt;Solution from Okta: Grace period &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref11:1&quot;&gt;[11:1]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Okta offers a grace period when you configure refresh token rotation. After the refresh token is rotated, the previous token remains valid for the configured amount of time to allow clients to get the new token.&lt;/li&gt;
&lt;li&gt;The default number of seconds for the Grace period for token rotation is set to &lt;strong&gt;30&lt;/strong&gt; seconds. You can change the value to any number from 0-60 seconds. After the refresh token is rotated, the previous token remains valid for this amount of time to allow clients to get the new token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;solution-from-auth0-grace-period&quot; tabindex=&quot;-1&quot;&gt;Solution from Auth0: Grace period &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref13&quot;&gt;[13]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Enter Reuse Interval (in seconds) for the refresh token to account for leeway time between request and response before triggering automatic reuse detection. This interval helps to avoid concurrency issues when exchanging the rotating refresh token multiple times within a given timeframe. During the leeway window the breach detection features don&#39;t apply and a new rotating refresh token is issued. Only the previous token can be reused; if the second-to-last one is exchanged, breach detection will be triggered.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;solution-2-revokaion-on-use&quot; tabindex=&quot;-1&quot;&gt;Solution 2: Revokaion-On-Use &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; id=&quot;fnref14&quot;&gt;[14]&lt;/a&gt;&lt;/sup&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Allow client retry with same refresh token&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep track of (1) one parent toke (RT1) and (2) a pool of child tokens.&lt;/li&gt;
&lt;li&gt;parent token means the latest token&#39;s&lt;/li&gt;
&lt;li&gt;child token means the retry-results of same parent. But &lt;strong&gt;we don&#39;t know if they actually successfully recieved by client&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;parent token (RT1) could generate multiple child refresh tokens and access tokens in pairs ((RT2, AT2), (RT2-1, AT2-1)...). Keep track of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invalidate other refresh tokens AFTER (1) one of sibling refresh token or (2) the corresponding &lt;code&gt;access_token&lt;/code&gt; once used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once &lt;code&gt;AT2-1&lt;/code&gt; is used, (1) sibling (RT2, AT2), (RT2-2, AT2)... should be revoked
&lt;ul&gt;
&lt;li&gt;because it ensures client already received one of the retries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;RT2-1&lt;/code&gt; is used (in next refresh), (1) sibling (RT2, AT2), (RT2-2, AT2)... should be revoked (2) (RT3, AT3) should be generated (3) &lt;code&gt;RT2-1&lt;/code&gt; should considered used and become parent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent token READ (token introspection) and WRITE (refresh token) should be handled carefully.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;open-source-oauth-server&quot; tabindex=&quot;-1&quot;&gt;Open Source OAuth Server &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ory/fosite.git&quot;&gt;https://github.com/ory/fosite.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/supertokens/supertokens-core&quot;&gt;https://github.com/supertokens/supertokens-core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java&quot;&gt;https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.5&quot;&gt;RFC 6749 1.5: Refresh Token&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-10.4&quot;&gt;RFC 6749 10.4: Refresh Tokens&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7009&quot;&gt;RFC 7009: OAuth 2.0 Token Revocation&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developers.google.com/identity/protocols/oauth2?hl=en#5.-refresh-the-access-token,-if-necessary&quot;&gt;Google OAuth&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/linkedin/shared/authentication/programmatic-refresh-tokens&quot;&gt;Google Refresh Tokens with OAuth 2.0&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-6&quot;&gt;RFC 6749 6: Refreshing an Access Token&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn7&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749#section-1.5&quot;&gt;RFC 6749 1.5: Refresh Token&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn8&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6819#section-5.2.2.3&quot;&gt;RFC 6819 5.2.2.3: Refresh Token Rotation&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn9&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developer.okta.com/docs/guides/refresh-tokens/main/#set-up-your-application&quot;&gt;Okta: Refresh token reuse detection&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn10&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.pingidentity.com/en/resources/blog/post/refresh-token-rotation-spa.html&quot;&gt;A Critical Analysis of Refresh Token Rotation in Single-page Applications&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn11&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developer.okta.com/docs/guides/refresh-tokens/main/#grace-period-for-token-rotation&quot;&gt;Okta: Grace period for token rotation&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn12&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation&quot;&gt;Auth0: Refresh Token Rotation&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn13&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://auth0.com/docs/secure/tokens/refresh-tokens/configure-refresh-token-rotation&quot;&gt;Auth0: Configure Refresh Token Rotation&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn14&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://devforum.zoom.us/t/how-to-protect-against-losing-refresh-token-response/10375/1&quot;&gt;How to protect against losing &lt;code&gt;refresh_token&lt;/code&gt; response?&lt;/a&gt; &lt;a href=&quot;https://hhow09.github.io/blog/oauth2-refresh-token/&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Character Sets and Encodings</title>
		<link href="https://hhow09.github.io/blog/charset-encoding/"/>
		<updated>2023-11-12T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/charset-encoding/</id>
		<content type="html">&lt;h2 id=&quot;ascii&quot; tabindex=&quot;-1&quot;&gt;ASCII &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc20&quot;&gt;RFC 20 ASCII format for Network Interchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASCII is a character set
&lt;ul&gt;
&lt;li&gt;Codes 0-31 are unprintable control codes and are used to control peripherals such as printers.&lt;/li&gt;
&lt;li&gt;Codes 32-127 are called printable characters, they are for all the &lt;a href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;different variations of the ASCII table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use 8 bits to represent individual characters. (7-bit in early age)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616&quot;&gt;HTTP 1.1&lt;/a&gt; uses &lt;code&gt;US-ASCII&lt;/code&gt; as basic character set for the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616#section-4.2&quot;&gt;request line&lt;/a&gt; in requests, the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616#section-6.1.1&quot;&gt;status line&lt;/a&gt; in responses (except the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616#section-6.1.1&quot;&gt;reason phrase&lt;/a&gt;) and the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616#section-4.2&quot;&gt;field names&lt;/a&gt; but allows any octet in the field values and the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2616#section-4.3&quot;&gt;message body&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eascii&quot; tabindex=&quot;-1&quot;&gt;EASCII &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;extended ASCII codes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unicode&quot; tabindex=&quot;-1&quot;&gt;UNICODE &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5198&quot;&gt;RFC 5198: Unicode Format for Network Interchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://home.unicode.org/&quot;&gt;unicode org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Unicode Standard refers to the standard character set that represents all natural language characters. Unicode can encode up to roughly 1.1 million characters, allowing it to support all of the world’s languages and scripts in a single, universal standard.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;UNICODE is &lt;code&gt;ASCII&lt;/code&gt; compatible (&lt;code&gt;U+0000&lt;/code&gt; to &lt;code&gt;U+007F&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;utf-8&quot; tabindex=&quot;-1&quot;&gt;UTF-8 &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3629&quot;&gt;RFC 3629: UTF-8, a transformation format of ISO 10646&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UTF-8 is defined by the Unicode Standard [&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3629#ref-UNICODE&quot;&gt;UNICODE&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;In UTF-8, characters from the &lt;code&gt;U+0000..U+10FFFF&lt;/code&gt; range  are encoded using sequences of 1 to 4 octets.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML header: &lt;code&gt;Content-Type: text/plain; charset=&amp;quot;UTF-8&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Golang: &lt;a href=&quot;https://go.dev/ref/spec#Source_code_representation&quot;&gt;Rune literals&lt;/a&gt; use UTF-8&lt;/li&gt;
&lt;li&gt;Rust: &lt;a href=&quot;https://doc.rust-lang.org/std/string/struct.String.html&quot;&gt;Struct std::string::String&lt;/a&gt; A UTF-8–encoded, growable string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;base64&quot; tabindex=&quot;-1&quot;&gt;Base64 &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RFC: &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4648#section-4&quot;&gt;rfc4648#section-4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;24 bits byte sequence can be represented by four &lt;strong&gt;6-bit Base64 digits&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 chars are used to represent &lt;code&gt;4 * 6 = 24 bits = 3 bytes&lt;/code&gt; (if we ignore the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4648#section-3.2&quot;&gt;padding&lt;/a&gt; and round-up detail)&lt;/li&gt;
&lt;li&gt;3-char string will become 4-char string after the encoding, which the means size will increase by about 33%.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used when there was a need to encode &lt;strong&gt;binary data&lt;/strong&gt; so that it can be stored and transferred over mediums that primarily designed to deal with ASCII text. E-Mail attachments are sent out as base64 encoded strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IS: case sensitive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Unix system, &lt;a href=&quot;https://en.wikipedia.org/wiki/Crypt_(C)&quot;&gt;crypt()&lt;/a&gt; uses a special Base64-type of encoding. It uses &lt;code&gt;./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&lt;/code&gt; to encode the hashed password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;example-1&quot; tabindex=&quot;-1&quot;&gt;Example: &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In binary, &amp;quot;cat&amp;quot; is &lt;code&gt;01100011 01100001 01110100&lt;/code&gt; ( 3 bytes)&lt;/li&gt;
&lt;li&gt;base 64 &amp;quot;cat&amp;quot; would be&lt;pre&gt;&lt;code&gt;011000 110110 000101 110100
|      |      |      |
Y      2      F      0
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;example-generate-random-password&quot; tabindex=&quot;-1&quot;&gt;Example - Generate random password &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Language-specific characters are typically avoided by password generators because they would not be universally available (US keyboards don&#39;t have accented characters, for instance). So don&#39;t take their omission from these tools as an indication that they might be weak or problematic.
- &lt;a href=&quot;https://security.stackexchange.com/questions/225346/is-it-bad-to-use-special-characters-in-passwords&quot;&gt;Is it bad to use special characters in passwords? [duplicate]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-go&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; main
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;crypto/rand&quot;&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;encoding/base64&quot;&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	buf &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; rand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Fatalf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error while generating random string: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// fmt.Println(string(buf)) // not printable&lt;/span&gt;

	printable_password &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StdEncoding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EncodeToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;generated password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; printable_password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;base64url&quot; tabindex=&quot;-1&quot;&gt;Base64Url &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4648#section-5&quot;&gt;RFC4648: Section 5: Base 64 Encoding with URL and Filename Safe Alphabet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;standard Base64&lt;/a&gt; uses &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; for the last 2 characters, and &lt;code&gt;=&lt;/code&gt; for padding.&lt;/li&gt;
&lt;li&gt;Base64Url uses &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; for the last 2 characters, and makes padding optional.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;usage&quot; tabindex=&quot;-1&quot;&gt;Usage &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the Base64-encoded text needs to be transmitted/saved where &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, or &lt;code&gt;=&lt;/code&gt; have special meaning, e.g. in URLs where all 3 does, then it is better to use &lt;code&gt;Base64Url&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the Base64-encoded text needs to be transmitted/saved where &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; have special meaning, then it is better to use Standard Base64.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ref&quot; tabindex=&quot;-1&quot;&gt;Ref &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/charset-encoding/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/ut74oHojxqo?si=XBBGiFS1kw4Q7Mj2&quot;&gt;Youtube:  Unicode, in friendly terms: ASCII, UTF-8, code points, character encodings, and more &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bharatkalluri.com/posts/base64-size-increase-explanation&quot;&gt;Why is a base 64 encoded file 33% larger than the original?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>System Design Interview Vol.2 - Chapter 6. Ad Click Event Aggregation</title>
		<link href="https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/"/>
		<updated>2023-06-18T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/</id>
		<content type="html">&lt;p&gt;the content mainly comes from &lt;a href=&quot;https://www.amazon.com/System-Design-Interview-Insiders-Guide/dp/1736049119&quot;&gt;System Design Interview Vol.2&lt;/a&gt; - &lt;a href=&quot;https://github.com/alex-xu-system/bytebytego/blob/main/system_design_links_vol2.md#chapter-6-ad-click-event-aggregation&quot;&gt;Chapter 6. Ad Click Event Aggregation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;design a ad click event aggregation system for near-realtime data.&lt;/p&gt;
&lt;h2 id=&quot;tldr&quot; tabindex=&quot;-1&quot;&gt;TLDR &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;data pipeline / streaming: message queue&lt;/li&gt;
&lt;li&gt;aggregation service: map reduce&lt;/li&gt;
&lt;li&gt;database: read-heavy, write-heavy, no update or transaction reqiured&lt;/li&gt;
&lt;li&gt;issues:
&lt;ul&gt;
&lt;li&gt;duplicate events&lt;/li&gt;
&lt;li&gt;exactly once processing&lt;/li&gt;
&lt;li&gt;fault tolerance&lt;/li&gt;
&lt;li&gt;hotspot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scaling
&lt;ul&gt;
&lt;li&gt;horizontal scaling in message queue, database and aggregaiton service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;requirement&quot; tabindex=&quot;-1&quot;&gt;Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;functional-requirement&quot; tabindex=&quot;-1&quot;&gt;Functional Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Support querying aggregated data: the number of clicks of certian ad (&lt;code&gt;ad_id&lt;/code&gt;) in last &lt;code&gt;M&lt;/code&gt; minutes&lt;/li&gt;
&lt;li&gt;Support querying aggregated data: top &lt;code&gt;N&lt;/code&gt; most clicked ad in last &lt;code&gt;M&lt;/code&gt; minutes.&lt;/li&gt;
&lt;li&gt;Support filtering by different attributes in above 2 querys.&lt;/li&gt;
&lt;li&gt;Dataset volume is FAANG scale
&lt;ul&gt;
&lt;li&gt;volume: single database is not a choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;non-functional-requirement&quot; tabindex=&quot;-1&quot;&gt;Non-Functional Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;correctness of the aggregation result is important
&lt;ul&gt;
&lt;li&gt;as data is used for RTB and ads billing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properly handle delayed duplicate events&lt;/li&gt;
&lt;li&gt;The system should be resilient to partial failures.&lt;/li&gt;
&lt;li&gt;End-to-end latency should be a few minutes, at most.
&lt;ul&gt;
&lt;li&gt;need realtime streaming system (instead of batch system)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;estimation&quot; tabindex=&quot;-1&quot;&gt;Estimation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;active users: 1e9 / day&lt;/li&gt;
&lt;li&gt;assume event per user: 1 / user&lt;/li&gt;
&lt;li&gt;QPS: &lt;code&gt;(1e9 * 1) / (1e5) = 1e5&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;assume peak hour could be &lt;code&gt;5e5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;high-level-design&quot; tabindex=&quot;-1&quot;&gt;High Level Design &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;data-model&quot; tabindex=&quot;-1&quot;&gt;Data Model &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;raw-event&quot; tabindex=&quot;-1&quot;&gt;Raw Event &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ad_id&lt;/th&gt;
&lt;th&gt;timestamp&lt;/th&gt;
&lt;th&gt;user_id&lt;/th&gt;
&lt;th&gt;ip&lt;/th&gt;
&lt;th&gt;country_code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ad001&lt;/td&gt;
&lt;td&gt;2023-06-01 00:00:01&lt;/td&gt;
&lt;td&gt;user1&lt;/td&gt;
&lt;td&gt;207.148.22.22&lt;/td&gt;
&lt;td&gt;US&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ad001&lt;/td&gt;
&lt;td&gt;2023-06-01 00:00:02&lt;/td&gt;
&lt;td&gt;user2&lt;/td&gt;
&lt;td&gt;209.153.55.11&lt;/td&gt;
&lt;td&gt;JP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ad002&lt;/td&gt;
&lt;td&gt;2023-06-01 00:00:02&lt;/td&gt;
&lt;td&gt;user2&lt;/td&gt;
&lt;td&gt;209.153.55.11&lt;/td&gt;
&lt;td&gt;JP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;aggregated-data&quot; tabindex=&quot;-1&quot;&gt;Aggregated Data &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ad_id&lt;/th&gt;
&lt;th&gt;timestamp_minute&lt;/th&gt;
&lt;th&gt;count&lt;/th&gt;
&lt;th&gt;filter_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ad001&lt;/td&gt;
&lt;td&gt;202306010000&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ad001&lt;/td&gt;
&lt;td&gt;202306010000&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ad002&lt;/td&gt;
&lt;td&gt;202306010001&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ad002&lt;/td&gt;
&lt;td&gt;202306010001&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0023&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;data under same &lt;code&gt;ad_id-timestamp_minute&lt;/code&gt; can be further group by &lt;code&gt;filter_id&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;query-api&quot; tabindex=&quot;-1&quot;&gt;Query API &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;the-number-of-clicks-of-certian-ad-ad-id-in-last-m-minutes&quot; tabindex=&quot;-1&quot;&gt;the number of clicks of certian ad (&lt;code&gt;ad_id&lt;/code&gt;) in last &lt;code&gt;M&lt;/code&gt; minutes &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;API: &lt;code&gt;GET /v1/ads/{:ad_id}/aggregated_count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;query parameters:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from_minute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_minute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;returns &lt;code&gt;ad_id&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;top-n-most-clicked-ad-in-last-m-minutes&quot; tabindex=&quot;-1&quot;&gt;top &lt;code&gt;N&lt;/code&gt; most clicked ad in last &lt;code&gt;M&lt;/code&gt; minutes &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;API: &lt;code&gt;GET /v1/ads/popular_ads&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;query parameters:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;: top &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window&lt;/code&gt;: last &lt;code&gt;M&lt;/code&gt; minutes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;returns &lt;code&gt;ad_ids&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data-storage&quot; tabindex=&quot;-1&quot;&gt;Data Storage &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;we need to store both raw data and aggregated data&lt;/p&gt;
&lt;h4 id=&quot;comparison-between-querying-raw-data-vs-aggregated-data&quot; tabindex=&quot;-1&quot;&gt;Comparison between querying raw data vs aggregated data &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;query raw data&lt;/th&gt;
&lt;th&gt;query aggregated data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;usage&lt;/td&gt;
&lt;td&gt;by other service&lt;/td&gt;
&lt;td&gt;this system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pros&lt;/td&gt;
&lt;td&gt;full data set,  support ad-hoc filter&lt;/td&gt;
&lt;td&gt;smaller data set, fast query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cons&lt;/td&gt;
&lt;td&gt;huge storage, slow query&lt;/td&gt;
&lt;td&gt;data loss&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;cold storage&lt;/td&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;database-choice&quot; tabindex=&quot;-1&quot;&gt;Database Choice &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;h5&gt;analyze&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;both read heavy and write-heavy
&lt;ul&gt;
&lt;li&gt;read: refresh the aggregation data in dashboard&lt;/li&gt;
&lt;li&gt;write: insert the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no relation and transaction needed&lt;/li&gt;
&lt;li&gt;time series&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Choices&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;InfluxDB &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cassandra &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[2]&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Netflix use cassandra for time series database &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;storage engine: LSM tree &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[4]&lt;/a&gt; (good for write heavy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;S3 + &lt;a href=&quot;https://www.databricks.com/glossary/what-is-parquet&quot;&gt;Parquet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;columnar storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;high-level-design-1&quot; tabindex=&quot;-1&quot;&gt;High Level Design &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/TjtMQlbZ7i-846.avif 846w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/TjtMQlbZ7i-846.webp 846w&quot;&gt;&lt;img alt=&quot;Figure 3: High Level Design&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/TjtMQlbZ7i-846.svg&quot; width=&quot;846&quot; height=&quot;506&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Kafka support high throughput, exact-once delivery.we can discuss exact-once delivery / atomic commit in &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;Delivery Guarantees&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;aggregation-service&quot; tabindex=&quot;-1&quot;&gt;Aggregation Service &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;the-number-of-clicks-of-certian-ad-ad-id-in-last-m-minutes-1&quot; tabindex=&quot;-1&quot;&gt;the number of clicks of certian ad (&lt;code&gt;ad_id&lt;/code&gt;) in last &lt;code&gt;M&lt;/code&gt; minutes &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/z6RTVsMZhH-949.avif 949w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/z6RTVsMZhH-949.webp 949w&quot;&gt;&lt;img alt=&quot;Figure 8 Aggregate the number of clicks&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/z6RTVsMZhH-949.svg&quot; width=&quot;949&quot; height=&quot;368&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;deep-dive&quot; tabindex=&quot;-1&quot;&gt;Deep Dive &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;aggregation-window-and-watermark&quot; tabindex=&quot;-1&quot;&gt;Aggregation Window and Watermark &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;what-is-watermarking&quot; tabindex=&quot;-1&quot;&gt;What Is Watermarking? &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;when working with real-time streaming data there will be delays between event time and processing time due to how data is ingested and whether the overall application experiences issues like downtime. Due to these potential variable delays, the engine that you use to process this data needs to have some mechanism to decide when to close the aggregate windows and produce the aggregate result.
&lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;delivery-guarantees&quot; tabindex=&quot;-1&quot;&gt;Delivery Guarantees &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In most circumstances, &lt;strong&gt;at-least once&lt;/strong&gt; processing is good enough if a small percentage of duplicates are acceptable. However, this is not the case for our system. Differences of a few percent in data points could result in discrepancies of millions of dollars.&lt;/p&gt;
&lt;p&gt;Therefore, we recommend &lt;strong&gt;exactly-once delivery&lt;/strong&gt; for the system.&lt;/p&gt;
&lt;h3 id=&quot;data-deduplication&quot; tabindex=&quot;-1&quot;&gt;Data deduplication &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;two common sources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client resend&lt;/li&gt;
&lt;li&gt;aggregation server outage&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/mPAtoBBGUB-1296.avif 1296w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/mPAtoBBGUB-1296.webp 1296w&quot;&gt;&lt;img alt=&quot;Figure 17 Duplicate data&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/mPAtoBBGUB-1296.svg&quot; width=&quot;1296&quot; height=&quot;1005&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;If step 6 fails, perhaps due to Aggregator outage, events from 100 to 110 are already sent to the downstream, but the new offset 110 is not persisted in upstream Kafka. In this case, a new Aggregator would consume again from offset 100, even if those events are already processed, causing duplicate data.&lt;/p&gt;
&lt;h4 id=&quot;solution&quot; tabindex=&quot;-1&quot;&gt;Solution &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/57_6r_SJe4-1791.avif 1791w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/57_6r_SJe4-1791.webp 1791w&quot;&gt;&lt;img alt=&quot;Figure 20 Distributed transaction&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/57_6r_SJe4-1791.svg&quot; width=&quot;1791&quot; height=&quot;1233&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;To achieve &lt;strong&gt;exactly-once processing&lt;/strong&gt; &lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[6]&lt;/a&gt;, we need to put operations between step 4 to step 6 in one distributed transaction.&lt;/p&gt;
&lt;p&gt;Most common technique is two phase commit&lt;/p&gt;
&lt;h2 id=&quot;scale-the-system&quot; tabindex=&quot;-1&quot;&gt;Scale the system &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;scale-the-message-queue&quot; tabindex=&quot;-1&quot;&gt;Scale the message queue &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;partition key: use &lt;code&gt;ad_id&lt;/code&gt; as &lt;strong&gt;partition key&lt;/strong&gt;&lt;a href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;[7]&lt;/a&gt; so that an aggregation service can subscribe to all events of the same &lt;code&gt;ad_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;number of partitions: if more consumers need to be added, try to do it during off-peak hours to minimize the impact.&lt;/li&gt;
&lt;li&gt;Topic physical sharding: We can split the data by geography (&lt;code&gt;topic_north_america&lt;/code&gt;, &lt;code&gt;topic_europe&lt;/code&gt;, &lt;code&gt;topic_asia&lt;/code&gt;, etc.,) or by business type (&lt;code&gt;topic_web_ads&lt;/code&gt;, &lt;code&gt;topic_mobile_ads&lt;/code&gt;, etc).
&lt;ul&gt;
&lt;li&gt;Pros: increased system throughput, reduced rebalance time.&lt;/li&gt;
&lt;li&gt;Cons: extra complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;scale-the-aggregation-service&quot; tabindex=&quot;-1&quot;&gt;Scale the aggregation service &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;multi-threading: Allocate events with different &lt;code&gt;ad_id&lt;/code&gt;s to different threads.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;scale-the-database&quot; tabindex=&quot;-1&quot;&gt;Scale the database &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cassandra natively supports horizontal scaling,&lt;/p&gt;
&lt;h3 id=&quot;hotspot-issue&quot; tabindex=&quot;-1&quot;&gt;Hotspot issue &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;aggregaion-service&quot; tabindex=&quot;-1&quot;&gt;Aggregaion Service &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;some &lt;code&gt;ad_id&lt;/code&gt; might receive many more ad click events than others.&lt;/p&gt;
&lt;p&gt;Solution: dynamically allocate more node in aggregation service.&lt;/p&gt;
&lt;h4 id=&quot;kafka&quot; tabindex=&quot;-1&quot;&gt;Kafka &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The publisher specifies the topic and the partition of a message before publishing. Hence, it’s the publisher’s responsibility to ensure that the partition logic will not result in a hot partition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.confluent.io/platform/current/kafka/monitoring.html&quot;&gt;Confluent: Monitoring Kafka with JMX&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;fault-tolerance&quot; tabindex=&quot;-1&quot;&gt;Fault tolerance &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;aggregaion service works in memory and &lt;strong&gt;could fail&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replaying data from the beginning of Kafka is slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solution: snapshot aggregaion service to safe &lt;strong&gt;current state&lt;/strong&gt; and &lt;strong&gt;event offset&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/TFtUeSY7BI-558.avif 558w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/TFtUeSY7BI-558.webp 558w&quot;&gt;&lt;img alt=&quot;Figure 27 Aggregation node failover&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/TFtUeSY7BI-558.svg&quot; width=&quot;558&quot; height=&quot;309&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;data-monitoring-and-correctness&quot; tabindex=&quot;-1&quot;&gt;Data monitoring and correctness &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;continuous-monitoring&quot; tabindex=&quot;-1&quot;&gt;Continuous monitoring &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Message queue size
&lt;ul&gt;
&lt;li&gt;for aggregation servie to scale the node&lt;/li&gt;
&lt;li&gt;for application to apply back pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System resources on aggregation nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;reconciliation&quot; tabindex=&quot;-1&quot;&gt;Reconciliation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;purpose: comparing different sets of data in order to ensure data integrity.&lt;/li&gt;
&lt;li&gt;how: using a &lt;strong&gt;batch job&lt;/strong&gt; and reconciling with the real-time aggregation result.&lt;/li&gt;
&lt;li&gt;why: some events might arrive late, the result from the batch job might not match exactly with the real-time aggregation result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/H38DsDbTtW-1033.avif 1033w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/H38DsDbTtW-1033.webp 1033w&quot;&gt;&lt;img alt=&quot;Figure 28 Final design&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/H38DsDbTtW-1033.svg&quot; width=&quot;1033&quot; height=&quot;434&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/system-design-interview-add-click-aggregation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.influxdata.com/blog/influxdb-vs-cassandra-time-series/&quot;&gt;InfluxDB Tops Cassandra in Time Series Data &amp;amp; Metrics Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thelastpickle.com/blog/2017/08/02/time-series-data-modeling-massive-scale.html&quot;&gt;Cassandra Time Series Data Modeling For Massive Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/scaling-time-series-data-storage-part-i-ec2b6d44ba39&quot;&gt;Scaling Time Series Data Storage — Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/en/cassandra-oss/3.x/cassandra/dml/dmlManageOndisk.html&quot;&gt;Apache Cassandra™ 3.x - Storage engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.databricks.com/blog/2022/08/22/feature-deep-dive-watermarking-apache-spark-structured-streaming.html&quot;&gt;Feature Deep Dive: Watermarking in Apache Spark Structured Streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flink.apache.org/2018/02/28/an-overview-of-end-to-end-exactly-once-processing-in-apache-flink-with-apache-kafka-too/&quot;&gt;An Overview of End-to-End Exactly-Once Processing in Apache Flink (with Apache Kafka, too!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/kafka-streams-tables-part-2-topics-partitions-and-storage-fundamentals/#partition-events&quot;&gt;Streams and Tables in Apache Kafka: Topics, Partitions, and Storage Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>Dremel: A Decade of Interactive SQL Analysis at Web Scale</title>
		<link href="https://hhow09.github.io/blog/paper-dremel/"/>
		<updated>2023-06-10T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/paper-dremel/</id>
		<content type="html">&lt;p&gt;Paper: &lt;a href=&quot;https://15721.courses.cs.cmu.edu/spring2023/papers/19-bigquery/p3461-melnik.pdf&quot;&gt;Dremel: A Decade of Interactive SQL Analysis at Web Scale&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;the main ideas we highlight in this paper are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SQL: simple SQL query to analyze nested data&lt;/li&gt;
&lt;li&gt;Disaggregated compute and storage: decouples compute from storage&lt;/li&gt;
&lt;li&gt;In situ analysis: different compute engines can operate on same piece of data&lt;/li&gt;
&lt;li&gt;Serverless computing: fully managed internal service&lt;/li&gt;
&lt;li&gt;Columnar storage&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;embracing-sql&quot; tabindex=&quot;-1&quot;&gt;Embracing SQL &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because SQL doesn’t scale, GFS and MapReduce became the standard ways to store and process huge datasets. However writing analysis jobs on these systems is difficult and complex. Dremel was one of the first systems to &lt;strong&gt;reintroduce SQL for Big
Data analysis&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Google, nearly all data passed between applications or stored on disk was in &lt;a href=&quot;https://protobuf.dev/&quot;&gt;Protocol Buffers&lt;/a&gt;. Dremel&#39;s critical innovations includes &lt;strong&gt;first-class support for structured data&lt;/strong&gt;. Dremel made it easy to query that hierarchical data with SQL.&lt;/p&gt;
&lt;h2 id=&quot;disaggregated-storage&quot; tabindex=&quot;-1&quot;&gt;Disaggregated storage &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dremel started with shared-nothing servers and computation is coupled with storage.&lt;/p&gt;
&lt;p&gt;In 2009, Dremel was migrated to &lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/bigquery-under-the-hood&quot;&gt;Borg (cluster management)&lt;/a&gt; and replicated storage. It accommodate the growing query workload and improve the utilization of the service. However &lt;strong&gt;storage and processing are still coupled&lt;/strong&gt;. Which means&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;all algorithms needed to be replication-aware&lt;/li&gt;
&lt;li&gt;resizing server also need to &lt;strong&gt;move data&lt;/strong&gt; around.&lt;/li&gt;
&lt;li&gt;Resources can only be accessed by Dremel.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Later Dremel was migrated from local disk to GFS. Performance was initially degraded. After lots of fine-tuning,  disaggregated storage outperformed the local-disk based system. There are several advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;improved SLOs and robustness of Dremel because GFS is fully-managed service.&lt;/li&gt;
&lt;li&gt;No more need to load from GFS onto Dremel server’s local disks.&lt;/li&gt;
&lt;li&gt;No need to resize our clusters in order to load new data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another notch of scalability and robustness was gained once Google’s file system was migrated from GFS (single-master model) to &lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/bigquery-under-the-hood&quot;&gt;Colossus (distributed multi-master model)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/ZNSywBCsI0-990.avif 990w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/ZNSywBCsI0-990.webp 990w&quot;&gt;&lt;img alt=&quot;Figure 1: Disaggregated storage, memory, and compute&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/ZNSywBCsI0-990.png&quot; width=&quot;990&quot; height=&quot;512&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;disaggregated-memory&quot; tabindex=&quot;-1&quot;&gt;Disaggregated memory &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dremel added support for &lt;strong&gt;distributed joins&lt;/strong&gt; with &lt;strong&gt;shuffle&lt;/strong&gt; utilizing &lt;strong&gt;local RAM and disk&lt;/strong&gt; to store sorted intermediate results. However there is bottleneck in scalability and multi-tenancy due to the  coupling between the compute nodes intermediate shuffle storage.&lt;/p&gt;
&lt;p&gt;In 2014, Dremel shuffle migrated to a &lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/in-memory-query-execution-in-google-bigquery&quot;&gt;new shuffle infrastructure&lt;/a&gt;. Shuffle data were stored in a distributed transient storage system. Improved peformance in-terms of latency and larger shuffle and service cost was observed.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/7rg3rOR0mF-1164.avif 1164w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/7rg3rOR0mF-1164.webp 1164w&quot;&gt;&lt;img alt=&quot;Disaggregated in-memory shuffle&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/7rg3rOR0mF-1164.png&quot; width=&quot;1164&quot; height=&quot;1012&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;observations&quot; tabindex=&quot;-1&quot;&gt;Observations &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Disaggregation proved to be a major trend in data management.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Economies of scale&lt;/li&gt;
&lt;li&gt;Universality&lt;/li&gt;
&lt;li&gt;Higher-level APIs:  Storage access is far removed from the early block I/O APIs.&lt;/li&gt;
&lt;li&gt;Value-added repackaging&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;in-situ-data-analysis&quot; tabindex=&quot;-1&quot;&gt;In Situ Data Analysis &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The data management community finds itself today in the middle of a transition from classical data warehouses to a &lt;strong&gt;datalake-oriented architecture&lt;/strong&gt; for analytics. The trend includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;consuming data from a variety of data sources&lt;/li&gt;
&lt;li&gt;eliminating traditional ETL-based data ingestion from an OLTP system to a data warehouse&lt;/li&gt;
&lt;li&gt;enabling a variety of compute engines to operate on the data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;dremel-s-evolution-to-in-situ-analysis&quot; tabindex=&quot;-1&quot;&gt;Dremel’s evolution to in situ analysis &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dremel’s initial design in 2006 was reminiscent of traditional DBMSs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;explicit data loading was required.&lt;/li&gt;
&lt;li&gt;the data was stored in a proprietary format.&lt;/li&gt;
&lt;li&gt;inaccessible to other tools.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As part of migrating Dremel to GFS, Dremel open the &lt;strong&gt;storage format&lt;/strong&gt; (as a library) within Google which has 2 distinguising properties: &lt;strong&gt;columnar&lt;/strong&gt;, &lt;strong&gt;self-dsecribing&lt;/strong&gt;. The &lt;strong&gt;self-dsecribing&lt;/strong&gt; feature enables interoperation between custom data transformation tools and SQL-based analytics.  MapReduce jobs could run on columnar data, write out columnar results, and those results could be immediately queried via Dremel. Users no longer had to load data into their data warehouse, any file they had in the GFS could effectively be queryable.&lt;/p&gt;
&lt;p&gt;In situ approach was evolved in two complementary directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;adding file formats beyond original columnar format.&lt;/li&gt;
&lt;li&gt;expanding the universe of joinable data ( e.g. BigTable, Cloud Storage, Google Drive ).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;drawbacks-of-in-situ-analysis&quot; tabindex=&quot;-1&quot;&gt;Drawbacks of in situ analysis &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;users do not always want to or have the capability to manage their own data safely and securely&lt;/li&gt;
&lt;li&gt;in situ analysis means there is no opportunity to either optimize storage layout or compute statistics in the general case.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;serverless-computing&quot; tabindex=&quot;-1&quot;&gt;Serverless Computing &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;serverless-roots&quot; tabindex=&quot;-1&quot;&gt;Serverless roots &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Most traditional DBMS and data-warehouse were deployed on dedicated servers.&lt;/li&gt;
&lt;li&gt;MapReduce and Hadoop uses virtual machines but are still single-tenant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three core ideas in Dremel which enable serverless analytics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disaggregation of compute, storage and memory&lt;/li&gt;
&lt;li&gt;Fault Tolerance and Restartability
&lt;ul&gt;
&lt;li&gt;each subtask are deterministic and repeatable&lt;/li&gt;
&lt;li&gt;task dispatcher may need to dispatching multiple copies of the same task to alleviate unresponsive workers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual Scheduling Units
&lt;ul&gt;
&lt;li&gt;Dremel scheduling logic was designed to work with abstract units of compute and memory
called slots&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;evolution-of-serverless-architecture&quot; tabindex=&quot;-1&quot;&gt;Evolution of serverless architecture &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dremel continued to evolve its serverless capabilities, making them one of the key characteristics of Google BigQuery today.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Centralized Scheduling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The scheduler uses the entire cluster state to make scheduling decisions which enables better utilization and isolation. (Figure 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/JY2-2bu-Gn-917.avif 917w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/JY2-2bu-Gn-917.webp 917w&quot;&gt;&lt;img alt=&quot;System architecture and execution inside a server
node&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/JY2-2bu-Gn-917.png&quot; width=&quot;917&quot; height=&quot;636&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shuffle Persistence Layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow decoupling scheduling and execution of different stages of the query.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible Execution DAGs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query coordinator builds the query plan (tree) and send to the workers&lt;/li&gt;
&lt;li&gt;Workers from the leaf stage read from the storage layer and write to the shuffle persistence layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://hhow09.github.io/img/t7gCl1YkGY-708.avif 708w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://hhow09.github.io/img/t7gCl1YkGY-708.webp 708w&quot;&gt;&lt;img alt=&quot;Shuffle-based execution plan&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://hhow09.github.io/img/t7gCl1YkGY-708.png&quot; width=&quot;708&quot; height=&quot;526&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic Query Execution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query execution plan can dynamically change during runtime based on the statistics collected during query execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;columar-storage-for-nested-data&quot; tabindex=&quot;-1&quot;&gt;Columar Storage For Nested Data &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main design decision behind &lt;strong&gt;repetition and definition levels encoding&lt;/strong&gt; was to encode all structure information within the column itself, so it can be accessed without reading ancestor fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repetition level: specifies for repeated values whether each ancestor record is appended into or starts a new value&lt;/li&gt;
&lt;li&gt;definition level: specifies which ancestor records are absent when an optional field is absent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In 2014, migration of the storage to an improved columnar format, &lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/inside-capacitor-bigquerys-next-generation-columnar-storage-format&quot;&gt;Capacitor&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;embedded-evaluation&quot; tabindex=&quot;-1&quot;&gt;Embedded evaluation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Capacitor&lt;/strong&gt; uses a number of techniques to make filtering efficient&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Partition and predicate pruning
&lt;ul&gt;
&lt;li&gt;Various statistics are maintained about the values in each column. They are used both to eliminate partitions that are guaranteed to not contain any matching rows, and to simplify the filter by removing tautologies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vectorization: &lt;a href=&quot;https://15721.courses.cs.cmu.edu/spring2019/papers/10-compression/abadi-sigmod2006.pdf&quot;&gt;Bit-Vector Encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Skip-indexes
&lt;ul&gt;
&lt;li&gt;Capacitor combines column values into segments, which are compressed individually.&lt;/li&gt;
&lt;li&gt;The column header contains an index with offsets pointing to the beginning of each segment.&lt;/li&gt;
&lt;li&gt;When the filter is very selective, Capacitor uses this index to skip segments that have no hits, avoiding their decompression.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Predicate reordering
&lt;ul&gt;
&lt;li&gt;Capacitor uses a number of heuristics to make filter reordering decisions, which take into account dictionary usage, unique value cardinality,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;row-reordering&quot; tabindex=&quot;-1&quot;&gt;Row reordering &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;run-length encodings (RLE) in particular is very sensitive to &lt;strong&gt;row ordering&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Usually, row order in the table does not have significance, so Capacitor is free to permute rows to improve RLE effectiveness.&lt;/li&gt;
&lt;li&gt;Capacitor’s row reordering algorithm uses sampling and heuristics to build an approximate model.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;interactive-query-latency-over-big-data&quot; tabindex=&quot;-1&quot;&gt;Interactive Query Latency Over Big Data &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;latency-reducing techniques implemented in Dremel:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Stand-by server pool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculative execution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small, fine-grained task&lt;/li&gt;
&lt;li&gt;duplicate tasks to prevent slow worker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-level execution trees&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Column-oriented schema representation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Balancing CPU and IO with lightweight compression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Approximate results&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dremel uses one-pass algorithms that work well with the multi-level execution tree architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query latency tier&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The dispatcher needed to be able to preempt the processing of parts of a query to allow a new user’s query to be processed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reuse of file operations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bottleneck for achieving low latency as thousands of Dremel workers send requests to the file system master(s) for metadata and to the chunk servers for open and read operations.&lt;/li&gt;
&lt;li&gt;The most important one: reuse metadata obtained from the file system by fetching it in a batch at the root server and passing it through the execution tree to the leaf servers for data reads.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guaranteed capacity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a customer could reserve some capacity and use that capacity only for latency-sensitive workloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adaptive query scaling&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/paper-dremel/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://15721.courses.cs.cmu.edu/spring2023/papers/19-bigquery/p3461-melnik.pdf&quot;&gt;Dremel: A Decade of Interactive SQL Analysis at Web Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/bigquery-under-the-hood&quot;&gt;BigQuery under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/in-memory-query-execution-in-google-bigquery&quot;&gt;In-memory query execution in Google BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/bigquery/inside-capacitor-bigquerys-next-generation-columnar-storage-format&quot;&gt;Inside Capacitor, BigQuery’s next-generation columnar storage format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Distributed ID Generation Solutions</title>
		<link href="https://hhow09.github.io/blog/distributed-id-generation/"/>
		<updated>2023-05-02T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/distributed-id-generation/</id>
		<content type="html">&lt;p&gt;Using auto-increment primary keys from traditional databases as ID for distributed systems can be inefficient and vulnerable to being predicted and analyzed.&lt;/p&gt;
&lt;p&gt;Nowadays, distributed systems require unique global identifiers; it is an essential task in distributed computing with growing internet usage.&lt;/p&gt;
&lt;h2 id=&quot;requirement&quot; tabindex=&quot;-1&quot;&gt;Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;functional-requirement&quot; tabindex=&quot;-1&quot;&gt;Functional Requirement &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;id should be globally unique&lt;/li&gt;
&lt;li&gt;low latency&lt;/li&gt;
&lt;li&gt;each node can generate id independently&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nice-to-have-features&quot; tabindex=&quot;-1&quot;&gt;Nice to have features &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;monotonicity (sortable by time)&lt;/li&gt;
&lt;li&gt;unpredictable&lt;/li&gt;
&lt;li&gt;high availability. Since an ID generator is a mission-critical system, it must be highly available.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;popular-solutions&quot; tabindex=&quot;-1&quot;&gt;Popular Solutions &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;UUID V4&lt;/li&gt;
&lt;li&gt;Nano ID&lt;/li&gt;
&lt;li&gt;ULID&lt;/li&gt;
&lt;li&gt;KSUID&lt;/li&gt;
&lt;li&gt;Mongdb objectID&lt;/li&gt;
&lt;li&gt;Snowflake ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;overview&quot; tabindex=&quot;-1&quot;&gt;Overview &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Designing a distributed ID generation scheme can be divided into two steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate the binary ID, usually selected from pseudo-random numbers, time, and node ID.&lt;/li&gt;
&lt;li&gt;Convert the binary ID into a human-readable and easily transmittable string text.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;binary-id-generation&quot; tabindex=&quot;-1&quot;&gt;Binary ID Generation &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-prng-pseudo-random-number-generator&quot; tabindex=&quot;-1&quot;&gt;1. PRNG (pseudo random number generator) &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;UUID v4 (128 bit)&lt;/li&gt;
&lt;li&gt;Nano ID (no standard length)&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th&gt;random number (bits)&lt;/th&gt;
&lt;th&gt;total (bits)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;UUID v4&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Nano ID&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;uuid-2&quot; tabindex=&quot;-1&quot;&gt;UUID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[2]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;UUIDv4 consists of 128 bits, which are typically represented as 32 hexadecimal characters in the following format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx, where the digit &amp;quot;4&amp;quot; in the third group signifies the version (i.e., UUIDv4) and the digit &amp;quot;y&amp;quot; in the fourth group specifies the variant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;pros&quot; tabindex=&quot;-1&quot;&gt;Pros &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Generating UUID is simple. No coordination between servers is needed so there will not be any synchronization issues.&lt;/li&gt;
&lt;li&gt;The system is easy to scale because each web server is responsible for generating IDs they consume. ID generator can easily scale with web servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;cons&quot; tabindex=&quot;-1&quot;&gt;Cons &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IDs are 128 bits long, but our requirement is 64 bits.&lt;/li&gt;
&lt;li&gt;IDs do not go up with time.&lt;/li&gt;
&lt;li&gt;IDs could be non-numeric.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Chance of duplicate ID&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;With the sheer number of possible combinations (2^128), it would be almost impossible to generate a duplicate unless you are generating trillions of IDs every second, for many years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;nano-id-3&quot; tabindex=&quot;-1&quot;&gt;Nano ID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[3]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;A tiny, secure, URL-friendly, unique string ID generator.
Small. 130 bytes (minified and gzipped). No dependencies. Size Limit controls the size.
Safe. It uses hardware random generator. Can be used in clusters.
Short IDs. It uses a larger alphabet than UUID (A-Za-z0-9_-). So ID size was reduced from 36 to 21 symbols.
Portable. Nano ID was ported to 20 programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-timestamp-prng&quot; tabindex=&quot;-1&quot;&gt;2. Timestamp + PRNG &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th&gt;timestamp (bits)&lt;/th&gt;
&lt;th&gt;random number (bits)&lt;/th&gt;
&lt;th&gt;total (bits)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ULID&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;KSUID&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;ulid-4&quot; tabindex=&quot;-1&quot;&gt;ULID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[4]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;128-bit compatibility with UUID&lt;/li&gt;
&lt;li&gt;Lexicographically sortable!
&lt;ul&gt;
&lt;li&gt;timestamp: UNIX-time in milliseconds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No special characters (URL safe)&lt;/li&gt;
&lt;li&gt;Monotonic sort order (correctly detects and handles the same millisecond)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ksuid-4&quot; tabindex=&quot;-1&quot;&gt;KSUID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[4]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;There are numerous methods for generating unique identifiers, so why KSUID?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Naturally ordered by generation time&lt;/li&gt;
&lt;li&gt;Collision-free, coordination-free, dependency-free&lt;/li&gt;
&lt;li&gt;Highly portable representations&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-timestamp-node-id-monotonic-counter&quot; tabindex=&quot;-1&quot;&gt;3. Timestamp + Node ID + Monotonic Counter &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th&gt;timestamp (bits)&lt;/th&gt;
&lt;th&gt;Node Id (bits)&lt;/th&gt;
&lt;th&gt;Process Id (bits)&lt;/th&gt;
&lt;th&gt;Counter (bits)&lt;/th&gt;
&lt;th&gt;total (bits)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Snowflake ID&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MongoDB ObjectID&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;id is unique across different node and process&lt;/li&gt;
&lt;li&gt;counter ensure the uniqueness on same process of same node&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;security-concern&quot; tabindex=&quot;-1&quot;&gt;Security Concern &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;since the structure of id, the entropy of id is quite small, which means &lt;a href=&quot;https://github.com/andresriancho/mongo-objectid-predict&quot;&gt;easy to predict&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It is dangerous through &lt;a href=&quot;https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References&quot;&gt;IDOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;snowflake-id-6&quot; tabindex=&quot;-1&quot;&gt;Snowflake ID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[6]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;timestamp: Epoch in milliseconds precision
&lt;ul&gt;
&lt;li&gt;That gives us &lt;strong&gt;69&lt;/strong&gt; years with respect to a &lt;strong&gt;custom epoch&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node ID: 10 bits, this gives us 1024 nodes/machines.&lt;/li&gt;
&lt;li&gt;Local counter: 12 bits, The counter’s max value would be 4095.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;mongodb-objectid-7&quot; tabindex=&quot;-1&quot;&gt;MongoDB ObjectID &lt;a href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;[7]&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The object ID is generated by the MongoDB driver instead of the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 12-byte ObjectId consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 4-byte timestamp, representing the ObjectId&#39;s creation, measured in seconds since the Unix epoch.&lt;/li&gt;
&lt;li&gt;A 5-byte random value generated once per process. This random value is unique to the machine and process.&lt;/li&gt;
&lt;li&gt;A 3-byte incrementing counter, initialized to a random value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;types-of-data-source&quot; tabindex=&quot;-1&quot;&gt;Types of data source &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;pseudo-random-number&quot; tabindex=&quot;-1&quot;&gt;Pseudo random number &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;packages&quot; tabindex=&quot;-1&quot;&gt;Packages &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/crypto/rand&quot;&gt;crypto/rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/math/rand&quot;&gt;math/rand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;considerations&quot; tabindex=&quot;-1&quot;&gt;Considerations &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;collisoin: longer bits gives lower chance of collision&lt;/li&gt;
&lt;li&gt;unpredictability: use &lt;code&gt;crypto/rand&lt;/code&gt; to lower unpredictability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-id-generation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://catcat.cc/post/2020-09-19/&quot;&gt;6 个流行的分布式 ID 方案之间的对决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4122&quot;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ai/nanoid&quot;&gt;Nano ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ulid/spec&quot;&gt;ULID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/segmentio/ksuid&quot;&gt;KSUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bwmarrin/snowflake&quot;&gt;Snowflake ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/reference/method/ObjectId/&quot;&gt;MongoDB ObjectID&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>Distributed System Index</title>
		<link href="https://hhow09.github.io/blog/distributed-system-index/"/>
		<updated>2023-04-23T00:00:00Z</updated>
		<id>https://hhow09.github.io/blog/distributed-system-index/</id>
		<content type="html">&lt;h2 id=&quot;course-books&quot; tabindex=&quot;-1&quot;&gt;Course / Books &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/&quot;&gt;Designing Data Intensive Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/index.html&quot;&gt;MIT 6.824: Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/teaching/2122/ConcDisSys/&quot;&gt;CAM: Concurrent and Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB&quot;&gt;Distributed Systems lecture series: Martin Kleppmann&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/teaching/2122/ConcDisSys/dist-sys-notes.pdf&quot;&gt;course notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/patterns-of-distributed-systems/&quot;&gt;Martin Fowler: Patterns of Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cap-theorem&quot; tabindex=&quot;-1&quot;&gt;CAP Theorem &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henryr/cap-faq&quot;&gt;henryr/cap-faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;issues&quot; tabindex=&quot;-1&quot;&gt;Issues &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;split brain&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;consistency-models&quot; tabindex=&quot;-1&quot;&gt;Consistency Models &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;overview: &lt;a href=&quot;https://jepsen.io/consistency&quot;&gt;jepsen/consistency&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;linearizability&quot; tabindex=&quot;-1&quot;&gt;linearizability &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;causal-consistency&quot; tabindex=&quot;-1&quot;&gt;causal consistency &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.exhypothesi.com/clocks-and-causality/&quot;&gt;Clocks and Causality - Ordering Events in Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jepsen.io/consistency/models/causal&quot;&gt;Jepsen: Causal Consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vkontech.com/causal-consistency-guarantees-case-studies/#What_is_Causal_Consistency&quot;&gt;Causal Consistency Guarantees – Case Studies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://timilearning.com/posts/mit-6.824/lecture-17-cops/&quot;&gt;MIT 6.824: Lecture 17 - Causal Consistency, COPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/core/causal-consistency-read-write-concerns/&quot;&gt;Mongodb: Causal Consistency and Read and Write Concerns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventual-consistency&quot; tabindex=&quot;-1&quot;&gt;eventual consistency &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&quot;replication&quot; tabindex=&quot;-1&quot;&gt;Replication &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Designing Data Intensive Applications Chapter 5 Replication&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;models-of-replication&quot; tabindex=&quot;-1&quot;&gt;Models of Replication &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Leaders and Followers&lt;/li&gt;
&lt;li&gt;Multi-Leader Replication&lt;/li&gt;
&lt;li&gt;Leaderless Replication&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;write-ahead-log&quot; tabindex=&quot;-1&quot;&gt;Write Ahead Log &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/patterns-of-distributed-systems/wal.html&quot;&gt;Martin Fowler: Write-Ahead Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/distributed-services-with/9781680508376/f_0025.xhtml&quot;&gt;Distributed Services with Go: Chapter 3 Write a Log Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/wal-intro.html&quot;&gt;PostGreSQL: 30.3. Write-Ahead Logging (WAL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/core/replica-set-oplog/&quot;&gt;MongoDB Oplog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;postgresql&quot; tabindex=&quot;-1&quot;&gt;PostGreSQL &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;physical v.s. Logical streaming replication&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mongodb&quot; tabindex=&quot;-1&quot;&gt;MongoDB &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/replication/&quot;&gt;MongoDB Manual: Replication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;partition&quot; tabindex=&quot;-1&quot;&gt;Partition &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;raft-consensus-algorithm&quot; tabindex=&quot;-1&quot;&gt;Raft (Consensus Algorithm) &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://raft.github.io/&quot;&gt;The Raft Consensus Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;The Secret Lives of Data: Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/uXEYuDwm7e4&quot;&gt;Distributed Systems 6.2: Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/teaching/2122/ConcDisSys/dist-sys-notes.pdf&quot;&gt;University of Cambridge: Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rum-conjecture&quot; tabindex=&quot;-1&quot;&gt;RUM Conjecture &lt;a class=&quot;header-anchor&quot; href=&quot;https://hhow09.github.io/blog/distributed-system-index/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The Trade offs Behind Modern Storage Systems&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://daslab.seas.harvard.edu/rum-conjecture/&quot;&gt;The RUM Conjecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://edward-huang.com/distributed-system/2021/01/24/the-trade-offs-behind-modern-storage-systems/&quot;&gt;The Trade offs Behind Modern Storage Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/wxcCHvQeZ-U&quot;&gt;Youtube: Algorithms behind Modern Storage Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
